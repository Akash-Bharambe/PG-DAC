Today's Topics

1. Revise Scanner 

2. Revise data types in java

3. JVM Architecture Overview (main focus on memory areas)

4. 1st pillar of OOP : Encapsulation
Class Programming , object creation ,reference types : with memory pics

5. Introduction to Garbage Collection

6. Introduction to user defined packages



Revision : 
1. Revise Scanner 

1.1 What is a Scanner 
It's a class from java.util package.
It's text based parser, has the inherent buffer to store the data.
It can read the data from : System.in(java.io.InputStream) , Text file , String....
1.2 Steps 
import java.util.Scanner;
Create scanner class instance
Scanner scanner=new Scanner(System.in)
Methods : hasNext() ,hasNextInt() , hasNextDouble() .... : for data checking
For actual reading n removing from the scanner : next(), nextInt() ,nextDouble()...

sc.close();

2. Answer this
2.1 What will happen, if you write this in main?
double d;
System.out.println(d);//javac err 
Scanner sc;
System.out.println(sc);//javac err

2.2 Can you add multiple non public (default) classes in a single java src file ? yes
Can you add multiple  public  classes in a single java src file ? no
Is there any rule regarding name of the default class n src file name ? no
Is there any rule regarding name of the public class n src file name ? yes


3. Revise data types in java
Java Data Types : which are 2 categories n details 

3.1 Types of conversions in primitive data types
1. Widening conversion (automatic promotion) : who performs it ? javac
What are the rules ?
src n dest type : compatible n dest data type MUST have larger range of values than src type

examples : 
byte --> int
short --> long
long --> float
float --> double


3.2  Narrowing Conversion : who performs it ? programmer !(type casting)
examples 

double --> float
int --> byte 
float --> long


3.3 Answer this 
What will data type of result of
1. byte & byte : int
2. byte & short : int
3. short & short : int
4. int & long : long
5. float & long : float
6. float & double : double
7. byte/short/int....& double : double

3.4 Write Java code to test these conversions.
Ref : TestPrimitiveTypeConversions.java



4. How Java works (little more in details)
4.1 Refer : "day2_help\diagrams\How Java works.png"

4.2 refer : day2-data\day2_help\diagrams\JVM Architecture
For more details , refer to Readme : About JVM.txt

5. Enter OOP
refer to : "day2_help\readmes\Encapsulation.txt"


5.1 Objective --
Create a class to represent 3D Box .
state -- width,depth,height : double precision

Use tight encapsulation, for the state

How will you init the state of the Box ?

Add Instance Methods(=non static methods) for simple Business logic below :
BTW , Why instance method n why not static methods ?

1. To return Box details (i.e dimensions of the Box) in a String form 

Identify method declaration.
access specifier(private/default/protected/public) , ret type , name , args , throws clause

Identify method definition --body

2. To return computed volume of the box.



5.2 this --keyword in java
"this" represents => current(i.e invoker)  object reference
Usages
1. To un-hide instance variable from local variable.
eg : this.width=width;

2. To invoke constructor of the same class , from some other constructor of the same class(Constructor chaining)
(Will be discussed later)


5.3 Before starting with Java ref type of variables : 

Consider CPP code (a small diversion !)
Given : below Employee class : 
#include <iostream>
using namespace std; 
class Employee {
   public : 
    string name;
    int employeeId;
    //Parameterized Constructor 
    Employee(string name,int id) 
    { 
        cout <<"Parameterized Constructor called "<< endl; 
        this->name=name;
        employeeId=id;
    } 
};
int main() {
    Employee emp1("Mayank", 1001);
    Employee emp2("Mihir", 1002);

    // Define a reference variable to an Employee object
    Employee& empRef = emp1;

    // Access and modify the object using the reference
    empRef.name = "MAYANK123";

    // Print the updated information
    cout << "Employee 1: " << emp1.name << ", " << emp1.employeeId << std::endl;
    cout << "Employee 2: " << emp2.name << ", " << emp2.employeeId << std::endl;
    cout << "Employee 1: " << empRef.name << ", " << empRef.employeeId << std::endl;
    return 0;

}

Any compiler errors or output ?

Now you look at another sample code : 
int main() {
    // Create an Employee object dynamically with the new keyword
    Employee* empPtr = new Employee("Rama",100);

    // Access the name member using the arrow operator
    cout << "Employee name: " << empPtr->name << std::endl;

    // Deallocate the dynamically allocated object to avoid memory leaks
    delete empPtr;

    return 0;
}


What will happen if you use . operator instead of -> (arrow) operator ?

5.4 Now re enter Java : 
Create another class(for the purpose of separation)  : TestBox --for  UI. 
Add psvmain(..){...}
Use scanner --to accept box dims from user, create box instance.
display its details & volume.

6.  Regarding Garbage Collection : 
refer to readme.


solve :
Box b1=new Box(1,2,3);
Box b2=b1;
Box b3=b1;
b1=b2=b3=null;//How many objects are marked GC ?  1
System.gc();//request for activating GC thread : NOT RECOMMENDED!!!!!

7.  Pointers vs java references

Similarity -- Pointer & reference --holds an address to the object created on heap.
Difference -- To add robustness to the language ,
pointer arithmatic is not allowed in java.

reference --- holds internal representation of address --

eg : 
int data =100;
data++;
Box b1=new Box(1,2,3);
b1++;  //javac err
b1 += 10; //javac err
String s=new String("hello");
s++;//javac err


8.  Regarding Java Packages 
If you don't add the package statement , Javac will add the class under default package -it's anonymous !

8.1 How to create user defined package?
package : keyword in Java , MUST appear only once , at the top of the src file .
eg : package tester;
class TestBox{.....}

OR
package com.cdac.tester;
class TestBox{.....}

package com.cdac.core;
class Box{.....}

What is it ?
Collection of functionally similar classes.

WHY ?
1. Functional separation
2. Helps in resolving duplicate classes
3. Finer control over access specfiers.

Objective :
 Modify Box scenario
Add Box class under : com.cdac.core package.
Add CreateBox class under : com.cdac.tester package
n test it. 

Refer : "day2-data\day2_help\readmes\regarding packages.txt"















8.5 access specifiers 
refer : diagrams\Access specifiers.png 
 diagrams\understanding access specifiers




10. Add more functionality : (for additional business logic)

1. Create Cubes


2. Add a method to Box class to compare equality of 2 boxes & test it


3. Add a method to Box class to return a new Box with modified offset dims & test it with the tester.
