What is JDBC ?
Java DB Connectivity
API (java.sql module --java.sql: fixed DB connectivity , javax.sql : Pooled connectivity) for connecting to DB n to perform CRUD operations

Why JDBC ?
Supports Platform independence + DB vendor independence(PARTIAL)
(WORA) : The same JDBC app can run on ANY platform n with ANY DB
Why partial : JDBC app : Since sql syntax can change form DB to DB
DB specific  
1. JDBC driver 
2. DB URL
3. user name
4. password
5. sql 

DB Journey : JDBC --- Hibernate -- JPA --Spring Data JPA


HOW JDBC grants DB inde. ?
1. JDBC Driver : program to convert Java API (methods) ---> DB understandable format n results of the queries are reverse translated in to java data format.
JDBC driver : JAR (eg : mysql-connector.jar, ojdbc8.jar....)
Vendor : DB vendor/ 3rd part JDBC driver vendors

2. JDBC API consists of i/fs
eg : Connection,Statement, ResultSet......
Imple. classes : present in JAR files
eg : Connection cn=DriverManager.getConnection(....);
This method actually rets : DB specific cn imple class instance
Summary : Java API supplies i/fs(specs)n imple is left to JDBC driver vendors
,leading to clean separation between specs(WHAT) vs HOW(imple)



Objectives
1. Display all user details : Statement
(select * from users)


2. User login 
Table -users 
sql - select * from users where email=? and password=?

3. Solve the SAME objective : using Layers
Tester --- DAO --DBUtils --POJO -- RDBMS

Bottoms up manner
Table : users
POJO(Plain Old Java Object/Model/Entity/DTO) : User
DAO : UserDao i/f n implementation class
DBUtils : openConnection 
Tester : create DAO , call DAO's CRUD methods, clean up dao.

What is a JDBC Driver n it's types ?
(Refer to slides)

Generic Steps in JDBC

Test DB Connection

Test Statement

Enter ORM n layered architecture.

Develop DB application using layered architecture --
1. User signin 
---------------Pending --------------------
1. Display all users(not admin) details born between specified dates.
2. Register new customer
3. Update password
4. Delete customer  details