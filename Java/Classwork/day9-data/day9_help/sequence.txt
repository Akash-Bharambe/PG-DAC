Today's Topics 

Revise enums
Rules regarding Method overriding n exception handling 
How will you parse n format Date ? (Legacy API)
Java 8 Date Time Handling overview

Introduction to Generics
Collection Framework overview.
Enter Lists

1. What is an enum ?
1.1 Why enums ?
1.2 What is the code generated by the javac ?
public enum AccountType {
	SAVING,CURRENT,FD,DMAT,LOAN;
	@Override
	public String toString()
	{
		return name().toLowerCase();
	}
}
public static final CURRENT;
In javac generated static {
...
CURRENT=new AccountType("CURRENT",1);
....
}


Important methods added by javac
valueOf
values
AccountType selectedType=AccountType.valueOf(sc.next().toUpperCase());

1.3 Inherited methods ?
name() , ordinal() , toString() ,compareTo(),equals....

2. Rules regarding Method overriding n exception handling
Refer - "Method overriding n exc handling.txt"
Rule - Overriding form of the method(sub class version) CAN NOT add any NEW OR BROADER CHECKED exceptions
otherwise : javac error !

examples : refer to readme

3. Objective : 
For the banking application , you want to store customer's birth date .
How will you parse n format it ?
Refer - "day9-data\day9_help\readme_strings_date_varargs.txt"

3.5 var-args 
Refer - "day9-data\day9_help\readme_strings_date_varargs.txt"


4. Are there any disadvantages of the Legacy Date / Time API ?
4.1 Date : has limited no of ctors 
i.e for simple parsing n formatting , must use - SimpleDateFormat -parse n format
4.2 In case of invalid value of day/month -- API doesn't throw the exc
4.3 Date related classes are inheretly thread un safe.

4.4 For practical requirement --prog had to use complex APIs.




If yes , 
Learn - Java 8 Date time Handling API


5. Objective 
Create a class to hold an int value
Add ctor n getter
Create a class to hold a String
Add ctor n getter
Create a class to hold an Emp 
Add ctor n getter
How will you do it ?
You will end up creating a class per data type !
ABSOLUTELY NOT DONE!!!!!!
Soln -- Create a Holder class that can hold ANY data type 
add ctor n getter.
public class Holder 
{
   private Object ref;
   //ctor n getter
}

Any problems noticed ??? YES !
1. Any time while accessing the data , you have to down cast explicity.
2. In case of wrong downcasting , JVM throws - ClassCastException .

So is there any solution to achieve the flexibility (i.e ANY type) as well as maintaining type safety @ compile time ? YES
--generic syntax !


Enter Generics ....


6. Collection Framework overview
Refer - "day9-data\day9_help\generics n collections\Collection Framework Overview.png"
Refer - "day9-data\day9_help\generics n collections\Java Collection Framework.pdf"

7. List n it's implementation classes.



