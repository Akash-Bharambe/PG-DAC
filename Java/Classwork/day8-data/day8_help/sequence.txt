Today's topics

Query
Why does String's contains accepts a CharSequence insted of a String ?
To offer flexibility to pass either String|StringBuilder|StringBuffer

Revise 
String Handling(Solve some questions here n then in the lab)
StringBuilder API

Java Enumeration
Wrapper classes
Java Date Time handling (legacy API)
Discuss FruitBasket assignment

0. For more practice -
Solve - "day8-data\day8_help\String questions.txt"

String class API
public String intern()
When you call intern() - JVM checks if the SAME String already exists in the SCP(by equals)
exists -- does not add any string to the pool , Rets : ref from literal string pool
doesn't exist -- adds non literal string object to SCP n rets its reference.


StringBuilder -- represents mutable char sequence
It has - length() n capacity()
Default initial capa : 16 chars 
(growable - dynamically , as per JVM)
Modern class (added later in Java)
Inherently thread un safe (un synchronized) --offers faster performance than 
StringBuffer. It's suggested as a drop-in replacement for StringBuffer.

Ctors
1. StringBuilder() - creates empty SB(StringBuilder) 
length - 0
init capa - 16

2. StringBuilder(int initCapa) - creates empty SB(StringBuilder) 
length - 0
init capa - initCapa
eg : StringBuilder sb=new StringBuilder(1024);
init capa - 1024

3. StringBuilder(String s) - creates populated SB(StringBuilder) 
length - s.length()
init capa - s.length() + 16

Methods --length,capacity
Overloaded methods
append, insert , delete
indexOf , lastIndexOf .....



1. What's enum : keyword in java (declares a type)
Refer : "day9_help\enums\regarding enums.txt"

What is an enum ?
Fixed set of self typed constants(public static final keyword implicitely added by javac)

Why Enum ?
1. To Support  fixed set of related self typed constants
2. applies type safety to the constants
3. can iterate over enum constants easily
4. supplying addtional info to enum constants is easy

Which are legal access specifiers for enum ? : default | public 

eg : public enum Color {
RED,YELLOW,GREEN,BLUE
}

In Banking system , for Bank Account 
--HAS-A
acct no , customer name , balance , opening date , acct type : enum

eg : public enum AccountType
{
   SAVING,CURRENT,FD,DMAT,LOAN
}

Javac generates the code for any enum 
For more details , refer -"day8-data\day8_help\enums\regarding enums.txt"

Below is the summary 

1. class : implicit super class : java.lang.Enum
eg : public final class Color extends java.lang.Enum {...}

2. implicit constr : private 
to init - enum consrant name n ordinal position
Invokes super class ctor .
eg : (super(name,ordinal))


private Color(String name,int ordinal) {super (name,ordinal);}
3. Javac adds 
 static  methods : values , valueOf :
3.1 public static  Enum[] values ()
3.2 To parse a string ---> Enum
public static Enum valueOf(String clr) throws IllegalArgumentException(un chked exception)
4. data members : public static final Color : RED,YELLOW, GREEN  : null
5. static init block : will be implicitly added by javac
RED=new Color("RED",0);
...
GREEN=new Color("GREEN",2);

Inherited methods from super class (java.lang.Enum)
1. public String name()
2. public int ordinal()
3. public String toString()
Also added - equals ,compareTo ....

6. Can you override toString method ? YES
BUT can't override : equals , compareTo


1. Objective :
Display all available account types to a bank customer n allow her to choose.
Parse acct type to enum n display the details.

eg : try(Scanner sc=new Scanner(System.in))
{
  sop("Supported acct types ");
  AcctType[] types=AcctType.values();
  for(AcctType a : types)
   sop(a);
  sop("Choose type ");
  AcctType chosenType=AcctType.valueOf(sc.next().toUpperCase()); //savings
 sop("Chosen a/c "+chosenType);//toString : Enum

} catch-all


2. Wrapper classes 
Refer : readme n inheritance hierarchy

Is Java pure Object oriented language ? NO 
since it supports primitive types also (for efficiency)

BUT can Object type of reference(Object ref)  DIRECTLY refer to any type(primitive n ref types) in java ? YES
eg : Object ref=100;
ref=new String("dfg");
ref=new Student(...);
ref=true;



3. Date / Time Handling in Java :
Legacy API (CCEE objective)  : java.util.Date , java.text.SimpleDateFormat ....
Modern API(Java 8 onwards) --new package is introduced -java.time


