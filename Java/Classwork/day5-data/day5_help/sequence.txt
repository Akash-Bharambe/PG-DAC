Today's Topics

1. Revision of -
inheritance n run time polymprphism(concept n through code sample)
toString

2. Enter Polymorphism formally
2.1 Compile time polymorphism
2.2 Run time polymorphism

3. Java Annotation

4. Complete Event organizer app
4.1 Up casting , downcasting , instanceof 

5. Enter Abstraction
5.1 Abstract methods , classes 



-----------------------------
1. Revise

1.1 Why Inheritance  -reduces redundancy n enhances re usability

Which type of relationship is imposed via Inheritance -IS A
As you go down  the inheritance  hierarchy : generalization --> speciliazation 
upper hierarchy classes : parent / base / super class
lower : child / derived / sub class
keyword : extends
universal super class : java.lang.Object
Which are the Supported Types of inheritance ? 
single , multi level , hierarchial , hybrid

Which one is not supported :  multiple 
why : to avoid the ambiguity
Better alternative : interface

What is "super" ? keyword 

What are super keyword usages?
1. To invoke immediate super cls's matching ctor
eg : Emp <----- Mgr
Emp : ctor 
Mgr : ctor 
super(id,name,salary,deptId...);

2. To access super class's visible members
eg : super.getDetails() / super.toString


1.2 Important Summary statement for inheritance n polymorphism

Sub class IS-A super class n optionally can add new members n can modify inherited behavior.

1.3 What is a "toString"
Object class' method
Method declaration ?
public String toString()
Rets F.Q clsName@hashCode


Why sub classes should override it ?
To replace hashCode returning version by the actual state details.

1.4 When you invoke System.out.println(ref) , how it auto calls ref.toString ?
ref : Box / Customer / Point2D or any type of reference.
eg : sop(p); => p.toString()

PrintStream : println(Object ref) --> String.valueOf(ref)
--> ref ==null ? null : ref.toString()


1.5 Answer this
Can a super class reference DIRECTLY(w/o type castin) refer to ANY sub class instance ? YES
eg : 
Person p=new Student(...);//up casting
p=new Faculty();
p=new LabFaculty(..);
Object o=new LabFaculty(...);
o=new Fruit(...);

1.6 Solve 
Given : 
Fruit <---Apple,Orange,Mango<---Alphonso

public class Fruit {
public String taste()
{
 return "No specific taste";
}
}

public class  Mango extends Fruit
{

public String taste()
{
  return "sweet";
}
}
public class Orange extends Fruit
{
public String taste()
{
  return "sour";
}
}

public class Alphonso extends Mango {
public String taste()
{
  return "very sweet";
}
}

public class Apple extends Fruit {
{
   public String taste()
{
  return "sweet n sour";
}
}


Solve
What will happen , if you write below code in a Tester ?
Fruit f=new Mango();//up casting 
sop(f.taste());//run time poly. --sweet

f=new Orange(...);//up casting
sop(f.taste());//sour


f=new Alphonso();//up casting

f.taste();// very sweet

2. Enter polymorphism formally
2.1 Compile time polymorphism
2.2 Run time polymorphism

3. Can sub classes add new behavior ? YES

Add a new method "study" in Student class
It should display first name of the student studying for Course name

Add a new method "teach" in Faculty class
It  should display  last name of the faculty expert in sme (subject matter expertise)

Add new option in event organizer app.
Option 5 : User i/p : seat no
Check if seat no is valid .
In case of valid seat no  --- If it's a Student , invoke study method , if it's a Faculty invoke teach method

How will you do it ?
Using down casting

4. When is downcasting required ?
In the in -direct referencing(super cls ref --> sub class object) , if you are calling sub class specific method (eg : study/teach) 
o.w : javac err !!

eg : Person p=new Student(....);
sop(p);
p.study();//javac err !(since javac resolves by type of ref n p : Person , study() DOES not exist in Person class)
Soln : Apply explict narrowing : down casting (Person --> Student)
((Student)p).study();//no javac err , no run time err : invokes the method.

p=new Faculty(...);//up casting
p.study();//javac err
((Student)p).study();//no javac err, run time err : java.lang.ClassCastException , Faculty can't be cast to a Student !!!!

Any problems in downcasting ? 
Wrong down casting --> run time err !!!!

5. Solution : instanceof : keyword in java
refer to : readme 

eg : Object <----Emp <---Mgr <---SalesMgr, HRMgr
Object <---- Emp <--- Worker <--TempWorker

Emp e=new SalesMgr(......);//up casting
e instanceof SalesMgr : true
e instanceof HRMgr : f
e instanceof Worker : f
e instanceof Mgr : t
e instanceof TempWorker : f
e instanceof Emp : t
e instanceof Object : t
e=null
e instanceof SalesMgr : f
e instanceof HRMgr
e instanceof WorkerMgr
e instanceof Mgr
e instanceof TempWorker
e instanceof Emp
e instanceof Object : f



6. Consider bounded shapes scenario
refer : "day5-data\day5_help\diagrams\bounded shapes scenario.png"




eg : In a Tester , Create bounded shapes using dynamic init of array
Display it's information n area using for-each


7. Abstraction : Refer to readme
7.1 Abstract methods 
7.2 Abstract classes
7.3 Final keyword







































Important readmes to go through from day5 help (for tomorrow's better understanding)

readme_inheritance_polymorphism.txt 
regarding static
regarding private members n inheritance.txt



a1 b1 2022 Java 34567 77